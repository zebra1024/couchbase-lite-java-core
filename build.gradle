apply plugin: 'java'
apply plugin: 'maven'

version = System.getenv("MAVEN_UPLOAD_VERSION")

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

repositories {
    mavenLocal()
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
}

sourceSets {
    main {
        java.srcDirs = [
                'src/main/java',
                'vendor/sqlite/src/java'
        ]
        resources {
            srcDir 'src/resources'
        }
    }
}

dependencies {
    compile 'com.squareup.okhttp3:okhttp:3.10.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile 'com.github.oxo42:stateless4j:2.4.0'
}

task createMavenDirectory(type: Exec) {

    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-java-core/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }
            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-java-core'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

task generateJavadocs(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
    List<File> pathList = new ArrayList<File>();
    pathList.add(file('extra/doclet/doclet.jar'))
    options.docletpath = pathList
    options.doclet = "ExcludeDoclet"
    options.showFromPublic()
    exclude "org/apache/http/**"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}
